name: Build

on:
  workflow_dispatch:
  
  # Triggers when any file unser /src has been changed
  push:
    paths:
      - "src/**"
      - ".github/workflows/build.yaml"


env:
  PROJECT_PATH: './src/webapi/webapi.csproj'
  TEST_PATH: './tests/webapi.tests/'
  OUTPUT_PATH: './output/webapi/'

jobs:
  build_webapi:
    name: Build and Test Web Api
    runs-on: ubuntu-latest
    steps:
    - name: Checkout 
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404

    - name: Build
      run: dotnet build ${{ env.PROJECT_PATH }}

    - name: Test
      run: dotnet test ${{ env.TEST_PATH }}

    - name: Publish
      run: dotnet publish --no-build --output ${{ env.OUTPUT_PATH }} ${{ env.PROJECT_PATH }}

    - name: Package webapi
      run: (cd ${{ env.OUTPUT_PATH }} && zip -r ../../webapi.zip .)

    - name: Upload Artifact 
      uses: actions/upload-artifact@v2
      with:
        name: webapi
        path: ./webapi.zip

  build_bicep:
    name: 'Build Bicep to ARM'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up bicep
        run: |
          # Fetch the latest Bicep CLI binary
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          # Mark it as executable
          chmod +x ./bicep
          # Add bicep to your PATH (requires admin)
          sudo mv ./bicep /usr/local/bin/bicep

      - name: Build bicep
        run: |
          bicep build main.bicep
          bicep build dbrestore.bicep
        working-directory: ./src/infra

      - name: Upload compiled arm template
        uses: actions/upload-artifact@v2
        with:
          name: arm
          path: ./src/infra/*.json
      
  build_and_publish_porter_bundle:
    name: 'Build and Publish Porter bundle'
    runs-on: ubuntu-latest
    needs: [build_webapi, build_bicep]
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get application artifacts
        uses: actions/download-artifact@v2
        with:
          path: ./src/bundle/output

      - name: Setup Porter
        uses: getporter/gh-action@v0.1.3

      - name: Prepare bundle image name
        run: echo IMAGE_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]' | cut -d '/' -f 2) >> $GITHUB_ENV
      - name: Change image name, version and repository in porter.yaml
        run: |
          sed -i "s/__github_repo_name/$IMAGE_NAME/g" ./porter.yaml
          sed -i "s/__app_version/v0.0.1-$GITHUB_SHA/g" ./porter.yaml
          sed -i "s/__github_username/\L${{ github.repository_owner }}/g" ./porter.yaml
        working-directory: ./src/bundle

      - name: Build Porter bundle
        run: porter build
        working-directory: ./src/bundle

      - name: Login to GitHub Packages OCI Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PACKAGE_ADMIN }}

      - name: Porter publish
        run: porter publish
        working-directory: ./src/bundle

      - name: Create copies for latest reference
        run: |
          BUNDLE_VERSION=$(cat porter.yaml | awk '$1 == "version:" {print $2}')
          BUNDLE_MAIN_VERSION=$(echo $BUNDLE_VERSION | awk -F- '{print $1}')
          BUNDLE_REGISTRY=$(cat porter.yaml | awk '$1 == "registry:" {print $2}')
          porter copy --source "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_VERSION}" --destination "${BUNDLE_REGISTRY}/${IMAGE_NAME}:latest"
          porter copy --source "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_VERSION}" --destination "${BUNDLE_REGISTRY}/${IMAGE_NAME}:${BUNDLE_MAIN_VERSION}-latest"
        working-directory: ./src/bundle
